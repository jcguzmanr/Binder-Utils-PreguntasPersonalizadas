#!/usr/bin/env python3
"""
Script para testing local del servicio QA personalizado
"""

import json
import os
import sys
from pathlib import Path

# Agregar directorio padre al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from lambda_function import lambda_handler


def create_test_event():
    """Crea evento de prueba para QA"""
    return {
        "texto_contrato": """
        CONTRATO DE PRESTACI√ìN DE SERVICIOS
        
        Entre los suscritos, JUAN CARLOS P√âREZ GARC√çA, identificado con DNI 12345678, 
        domiciliado en Av. Principal 123, Lima, en adelante "EL PRESTADOR", y 
        EMPRESA ABC S.A.C., con RUC 20123456789, domiciliada en Jr. Comercial 456, 
        Lima, en adelante "EL CONTRATANTE", se celebra el presente contrato de 
        prestaci√≥n de servicios con las siguientes cl√°usulas:
        
        PRIMERA: OBJETO
        El objeto del presente contrato es la prestaci√≥n de servicios de consultor√≠a 
        en tecnolog√≠a por parte del PRESTADOR a favor del CONTRATANTE.
        
        SEGUNDA: REMUNERACI√ìN
        Por los servicios prestados, el CONTRATANTE pagar√° al PRESTADOR la suma de 
        S/ 5,000.00 (cinco mil soles) mensuales, los cuales ser√°n cancelados hasta 
        el d√≠a 30 de cada mes.
        
        TERCERA: VIGENCIA
        El presente contrato tendr√° una duraci√≥n de 12 (doce) meses, contados a partir 
        del 1 de enero de 2024, pudiendo ser renovado por per√≠odos iguales de mutuo 
        acuerdo entre las partes.
        
        CUARTA: CONFIDENCIALIDAD
        Las partes se comprometen a mantener la m√°s estricta confidencialidad sobre 
        toda la informaci√≥n que se intercambie en virtud del presente contrato.
        
        QUINTA: FIRMAS
        En se√±al de conformidad, se firma el presente contrato en Lima, a los 15 d√≠as 
        del mes de diciembre de 2023.
        """,
        "reference_id": "test-001",
        "qa": {
            "incluir_razonamiento": True,
            "preguntas": [
                "¬øCu√°l es el monto de la remuneraci√≥n mensual?",
                "¬øCu√°l es la fecha de inicio del contrato?",
                "¬øExiste cl√°usula de confidencialidad?",
                "¬øCu√°l es la duraci√≥n del contrato?",
                "¬øQui√©n es el prestador de servicios?"
            ]
        }
    }


def create_test_context():
    """Crea contexto de prueba para Lambda"""
    class MockContext:
        def __init__(self):
            self.function_name = "qa-personalizado-test"
            self.function_version = "$LATEST"
            self.invoked_function_arn = "arn:aws:lambda:us-east-1:123456789012:function:qa-personalizado-test"
            self.memory_limit_in_mb = 128
            self.remaining_time_in_millis = 30000
    
    return MockContext()


def main():
    """Funci√≥n principal para testing local"""
    print("üß™ Testing QA Personalizado Service")
    print("=" * 50)
    
    # Verificar API key
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY no encontrada en variables de entorno")
        print("   Crea un archivo .env en el directorio ra√≠z con:")
        print("   OPENAI_API_KEY=tu_api_key_aqui")
        return 1
    
    print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...")
    
    # Crear evento y contexto de prueba
    event = create_test_event()
    context = create_test_context()
    
    print(f"üìã Evento de prueba creado con {len(event['qa']['preguntas'])} preguntas")
    print(f"üìÑ Texto del contrato: {len(event['texto_contrato'])} caracteres")
    
    print("\nüöÄ Ejecutando lambda_handler...")
    print("-" * 30)
    
    try:
        # Ejecutar handler
        result = lambda_handler(event, context)
        
        print("‚úÖ Resultado obtenido:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        # Verificar resultado
        if isinstance(result, dict) and result.get("success"):
            print("\nüéâ Test exitoso!")
            qa_resultados = result.get("qa_resultados", [])
            print(f"üìä Respuestas generadas: {len(qa_resultados)}")
            
            for i, respuesta in enumerate(qa_resultados, 1):
                print(f"\n{i}. {respuesta.get('pregunta', 'N/A')}")
                print(f"   Respuesta: {respuesta.get('respuesta', 'N/A')}")
                print(f"   Confianza: {respuesta.get('confianza', 'N/A')}")
                if respuesta.get('razonamiento'):
                    print(f"   Razonamiento: {respuesta.get('razonamiento', 'N/A')}")
        else:
            print("\n‚ùå Test fall√≥")
            if isinstance(result, dict):
                error = result.get("error", {})
                print(f"   C√≥digo: {error.get('codigo', 'N/A')}")
                print(f"   Detalle: {error.get('detalle', 'N/A')}")
        
        return 0
        
    except Exception as e:
        print(f"\nüí• Error durante la ejecuci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
